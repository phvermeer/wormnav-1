buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.2'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

dependencies {
    implementation files('libs/httpclient-4.5.jar')
    implementation files('libs/httpcore-4.4.1.jar')
    implementation files('libs/httpmime-4.5.jar')
}

repositories {
    google()
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    implementation 'com.google.android.gms:play-services-location:21.2.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.osmdroid:osmdroid-android:6.1.18'
    implementation 'com.github.MKergall:osmbonuspack:6.3'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.garmin.connectiq:ciq-companion-app-sdk:2.0.3@aar'
    implementation 'androidx.core:core-ktx:+'
    implementation 'androidx.activity:activity:1.8.2'

    implementation "androidx.compose.ui:ui"

    // Material Design 3
    implementation 'androidx.compose.material3:material3:1.2.1'
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.activity:activity-compose:1.9.0-rc01'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-compose:2.8.0-alpha06'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.8.2'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1'

    implementation "androidx.ui:ui-framework:0.1.0-dev03"


    implementation project(':Karambola')
    testImplementation 'junit:junit:4.13.2'
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {

    compileSdk 34

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    defaultConfig {
        applicationId "org.andan.android.connectiq.wormnav"
        minSdkVersion 24
        targetSdk 34
        versionCode 121
        versionName '1.2.1'
        setProperty("archivesBaseName", "Worm navigation")
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.3"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    // Load keystore
    //def keystorePropertiesFile = rootProject.file("/home/andan/keystores/keystore.properties");
    // if(keystorePropertiesFile == null
    def keystorePropertiesFile = file("C:/Users/Andreas/develop/keystores/keystore.properties");
    def keystoreProperties = new Properties()
    try {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    catch (FileNotFoundException e) {
        keystoreProperties = null
    }

    signingConfigs {
        config {
            if(keystoreProperties != null) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            //debuggable true
            //minifyEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    flavorDimensions "emulator"
    productFlavors {
        emu {
            dimension "emulator"
        }
        real {
            dimension "emulator"
        }
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }

    useLibrary 'org.apache.http.legacy'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'org.andan.android.connectiq.wormnav'
}















